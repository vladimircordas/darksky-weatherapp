{"version":3,"sources":["FrontSide/options.svg","FrontSide/WeatherIcon.js","FrontSide/FrontSideView.js","api.js","FrontSide/index.js","CitiesList/CityItem.js","CitiesList/index.js","BackSide/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","icon","src","alt","width","date","temperature","summary","apparentTemperature","currentCityName","onClick","windSpeed","windBearing","time","className","format","WeatherIcon","parseInt","faWind","style","transform","display","faArrowUp","faMapMarkerAlt","optionsImage","href","getWeatherForLocation","city","lat","long","lng","fetch","mode","then","res","json","FrontSide","state","currentWeather","prevCityId","loading","updateWeather","props","currentCity","weather","setState","currently","this","prevProps","prevState","background","FrontSideView","moment","name","nextProps","Component","CityItem","onSelect","isSelected","React","CitiesList","search","event","target","value","substr","cities","filteredCities","filter","toLowerCase","indexOf","required","id","type","onChange","updateSearch","bind","htmlFor","map","key","App","flipped","onFlip","onSelectCity","BackSide","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba3b199d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/options.7c7ebaa4.svg\";","import React from \"react\";\r\n\r\nexport default ({icon}) =>{\r\n    return <img src={`/icons/${icon}.svg`} alt=\"weather icon\" width=\"120px\"/>\r\n}","import React from 'react';\nimport \"./card.css\";\n\nimport optionsImage from \"./options.svg\";\nimport WeatherIcon from \"./WeatherIcon\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMapMarkerAlt, faWind, faArrowUp } from '@fortawesome/free-solid-svg-icons';\n\n\nexport default ({\n  date, \n  icon, \n  temperature,\n  summary,\n  apparentTemperature, \n  currentCityName,\n  onClick,\n  windSpeed,\n  windBearing,\n  time\n}) => {\n  return (\n    <div className={`card is-${icon}`}>\n      <div className=\"card-row\">\n        <div className=\"card-day\">{date.format(\"dddd\")}</div>\n        <div className=\"card-day\">{date.format(\"MMM Do\")}</div>\n      </div>\n      <WeatherIcon icon={icon}/>\n      <div className=\"card-row\">\n        <div className=\"card-temperature\">{`${parseInt(temperature, 10)}°`}\n          <span className=\"small\">/ {`${parseInt(apparentTemperature, 10)}°`}</span>\n        </div>\n        <div className=\"card-weather\">{summary}</div>\n      </div>\n      <div className=\"card-row\">\n        <div className=\"card-temperature\"><FontAwesomeIcon icon={faWind} /> {windSpeed}Km/h\n        </div>\n        <div className=\"\">Direction <span style={{transform: `rotate(${windBearing}deg)`, display: \"inline-block\"}}><FontAwesomeIcon icon={faArrowUp} /></span>\n        </div>\n      </div>\n      <div className=\"card-line\" />\n      <div className=\"card-row\">\n        <div className=\"card-city\"><FontAwesomeIcon icon={faMapMarkerAlt} /> {currentCityName}</div>\n        <button className=\"card-options\" onClick={onClick}>\n          <img src={optionsImage} width={32} alt=\"options\" />\n        </button>\n      </div>\n      \n      <div className=\"credits\">created with <a href=\"https://darksky.net/\">DarkSky</a> API</div>\n    </div>\n  )\n}","export const getWeatherForLocation = city => {\n  //const [lat, long] = city[\"latt_long\"].split(\",\");\n  const lat = city.lat;\n  const long = city.lng;\n  return fetch(\n    `https://cors-anywhere.herokuapp.com/https://vlads-weather-app.herokuapp.com/forecast/${lat},${long}`,\n    {\n      mode: \"cors\"\n    }\n  ).then(res => res.json());\n};","import React, {Component} from 'react';\r\nimport FrontSideView from './FrontSideView';\r\nimport moment from \"moment\";\r\nimport{ getWeatherForLocation } from '../api';\r\n\r\nclass FrontSide extends Component {\r\n    state = { \r\n        currentWeather: null, \r\n        prevCityId: null,\r\n        loading: true\r\n    };\r\n\r\n    updateWeather = () => {\r\n        getWeatherForLocation(this.props.currentCity).then(weather => {\r\n          this.setState({ currentWeather: weather.currently, loading: false });\r\n        });\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.updateWeather();\r\n    }\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        if (nextProps.currentCity.name !== prevState.prevCityId) {\r\n          return {\r\n            prevCityId: nextProps.currentCity.name,\r\n            currentWeather: null\r\n          };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.state.currentWeather) {\r\n          return null;\r\n        }\r\n        this.updateWeather();\r\n    }\r\n    \r\n\r\n    render(){\r\n        if(!this.state.currentWeather) {\r\n            return null;\r\n        }\r\n        if(this.state.loading){\r\n            return(\r\n                <div style={{background: \"red\"}}>\r\n                    Loading...\r\n                </div>\r\n            )\r\n        }\r\n        \r\n    const { \r\n        icon,\r\n        temperature,\r\n        apparentTemperature,\r\n        summary,\r\n        windSpeed,\r\n        windBearing\r\n    } = this.state.currentWeather;\r\n\r\n        return (\r\n            <FrontSideView\r\n              date={moment()} \r\n              icon={icon} \r\n              temperature={temperature}\r\n              summary={summary}\r\n              apparentTemperature={apparentTemperature}\r\n              currentCityName={this.props.currentCity.name}\r\n              onClick={this.props.onClick}\r\n              windSpeed={windSpeed}\r\n              windBearing={windBearing}\r\n        />\r\n        )\r\n    }\r\n}\r\n\r\nexport default FrontSide;","import React from 'react';\r\n\r\nexport default class CityItem extends React.Component{\r\n\r\n    onClick = () => {\r\n        const { onSelect, city } = this.props;\r\n        onSelect(city);\r\n    }\r\n\r\n    render(){\r\n    \r\n        const {city, isSelected} = this.props;\r\n    \r\n        return(\r\n        \r\n            <li\r\n                onClick={this.onClick}\r\n                className={`list-item ${ isSelected ? \"is-selected\" : \"\" }`}\r\n                >{city.name}</li>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './list.css';\r\nimport CityItem from \"./CityItem\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default class CitiesList extends React.Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        search: \"\"\r\n      };\r\n    }\r\n\r\n    updateSearch(event){\r\n        this.setState({search: event.target.value.substr(0,20)});\r\n    }\r\n\r\n    render(){\r\n        const { cities, currentCity, onSelect } = this.props;\r\n        let filteredCities = cities.filter(\r\n            (city) => {\r\n                return city.name.toLowerCase().indexOf(\r\n                    this.state.search.toLowerCase()) !== -1;\r\n                \r\n            }\r\n        );\r\n        return(\r\n            <div className=\"list-wrapper\">\r\n                <div className=\"seachBar-wrapper\">\r\n                    <div className=\"material-form-field\">\r\n                        <input  required\r\n                                name=\"text\" \r\n                                id=\"field-text\"\r\n                                className=\"searchBar\"\r\n                                type=\"text\" \r\n                                value={this.state.search}\r\n                                onChange={this.updateSearch.bind(this)}\r\n                        />\r\n                        <label className=\"material-form-field-label\" htmlFor=\"field-text\"><FontAwesomeIcon icon={faMapMarkerAlt} /> {currentCity.name}</label>\r\n                    </div>\r\n                </div>\r\n               \r\n                <ul className=\"list\">\r\n                    {filteredCities.map(city => {\r\n                        return (\r\n                            <CityItem\r\n                            key={city.name + city.lat + city.lng}\r\n                                isSelected={currentCity.name === city.name}\r\n                                city={city} onSelect={onSelect}\r\n                            />\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n// export default ({ cities, currentCity, onSelect }) => {\r\n    \r\n\r\n    \r\n    \r\n\r\n\r\n//     let filteredCities = cities;\r\n//     return (\r\n       \r\n//             <div className=\"list-wrapper\">\r\n//                 <input type=\"text\" placeholder={currentCity.name}/>\r\n//                 <ul className=\"list\">\r\n//                     {filteredCities.map(city => {\r\n//                         return (\r\n//                             <CityItem\r\n//                             key={city.name + city.lat + city.lng}\r\n//                                 isSelected={currentCity.name === city.name}\r\n//                                 city={city} onSelect={onSelect}\r\n//                             />\r\n//                         )\r\n//                     })}\r\n//                 </ul>\r\n//             </div>\r\n//     )\r\n// }","import React from 'react';\r\nimport CitiesList from '../CitiesList/index';\r\nimport './button.css';\r\n\r\nexport default ({ onClick, cities, currentCity, onSelect }) => {\r\n    // console.log(currentCity);\r\n    return (\r\n        <div className=\"card-back\">\r\n            <CitiesList \r\n                cities={cities}\r\n                currentCity={currentCity}\r\n                onSelect={onSelect}\r\n            />\r\n          <button \r\n                className=\"button\" \r\n                onClick={onClick}\r\n                >\r\n            Flip back\r\n        </button>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport FrontSide from \"./FrontSide/index\";\nimport BackSide from \"./BackSide/index\";\nimport cities from \"./cities.json\";\nimport \"./panel.css\";\n\nclass App extends React.Component {\n  state = {flipped: false, currentCity: cities[0]}\n\n  onFlip = () => {\n    this.setState({flipped: !this.state.flipped});\n  };\n\n  onSelectCity = (city) => {\n    this.setState({ currentCity: city });\n  };\n\n  render(){\n    return (\n      <div className={`panel ${this.state.flipped ? \"flip\" : \"\"}`}>\n        <div className=\"panel-front\">\n          <FrontSide onClick={this.onFlip} currentCity={this.state.currentCity}/>\n        </div>\n        <div className=\"panel-back\">\n          <BackSide cities={cities} onClick={this.onFlip} currentCity={this.state.currentCity} onSelect={this.onSelectCity}/>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}